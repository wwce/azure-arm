{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "comments": "This template is released under an as-is, best effort, and is community supported.",
    "author": "Matt McLimans (mmclimans@paloaltonetworks.com)"
  },
  "parameters": {
    "VNETOption": {
      "type": "string",
      "defaultValue": "Create new VNET",
      "allowedValues": [
        "Create new VNET",
        "Use existing VNET"
      ],
      "metadata": {
        "description": "If creating a new VNET, anything not specified in the template will be deleted."
      }
    },
    "VNETResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "If you are deploying a VNET to a different resource than the firewalls, the resource group MUST exist before launch.  If deploying a VNET to the same resource group as the firewalls, leave the field blank or enter the main resource group name."
      }
    },
    "VNETName": {
      "type": "string",
      "defaultValue": "vmseries-vnet",
      "metadata": {
        "description": "Enter a name for the virtual network."
      }
    },
    "VNETPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Enter a prefix for the virtual network."
      }
    },
    "subnetName-Management": {
      "type": "string",
      "defaultValue": "mgmt-subnet",
      "metadata": {
        "description": "Enter a subnet name for the firewall's management interface."
      }
    },
    "subnetName-Dataplane1": {
      "type": "string",
      "defaultValue": "untrust-subnet",
      "metadata": {
        "description": "Enter a subnet name for the firewall's first dataplane interface."
      }
    },
    "subnetName-Dataplane2": {
      "type": "string",
      "defaultValue": "trust-subnet",
      "metadata": {
        "description": "Enter a subnet name for the firewall's second dataplane interface."
      }
    },
    "subnetName-InternalLB": {
      "type": "string",
      "defaultValue": "lb-subnet",
      "metadata": {
        "description": "Enter the subnet name for the internal load balancer."
      }
    },
    "subnetName-AppGW": {
      "type": "string",
      "defaultValue": "appgw-subnet",
      "metadata": {
        "description": "Enter the subnet name for the App Gateway."
      }
    },
    "subnetPrefix-Management": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "Enter a subnet prefix for the firewall's management interface."
      }
    },
    "subnetPrefix-Dataplane1": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "Enter a subnet prefix for the firewall's first dataplane interface."
      }
    },
    "subnetPrefix-Dataplane2": {
      "type": "string",
      "defaultValue": "10.0.2.0/24",
      "metadata": {
        "description": "Enter a subnet prefix for the firewall's second dataplane interface."
      }
    },
    "subnetPrefix-InternalLB": {
      "type": "string",
      "defaultValue": "10.0.3.0/24",
      "metadata": {
        "description": "Enter a subnet prefix for the internal load balancer."
      }
    },
    "subnetPrefix-AppGW": {
      "type": "string",
      "defaultValue": "10.0.4.0/24",
      "metadata": {
        "description": "Enter a subnet prefix for the App Gateway."
      }
    },
    "appGWName": {
      "type": "string",
      "defaultValue": "vmseries-app-gw",
      "metadata": {
        "description": "Enter a name for the Application Gateway."
      }
    },
    "appGWSize": {
      "type": "string",
      "defaultValue": "Standard_Small",
      "allowedValues": [
        "Standard_Small",
        "Standard_Medium",
        "Standard_Large",
        "WAF_Medium",
        "WAF_Large"
      ],
      "metadata": {
        "description": "Select size and tier of the Application Gateway.  The WAF_Medium and WAF_Large deploy an unconfigured WAF.  Changing from WAF to Standard tier after deployment is not supported."
      }
    },
    "appGWCapacity": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 2,
      "maxValue": 50,
      "metadata": {
        "description": "Specify the instance count of the application gateway.  A minimum instance count of 2 is recommended for production workloads."
      }
    },
    "publicLBName": {
      "type": "string",
      "defaultValue": "vmseries-public-lb",
      "metadata": {
        "description": "Enter a name for the public load balancer."
      }
    },
    "publicLBAllowedPorts": {
      "type": "string",
      "defaultValue": "80, 443, 22, 3389",
      "metadata": {
        "description": "In a comma separated list, enter the ports you want to allow in the public load balancer's rule base.  Every port entered will create an additional rule (i.e. 4 ports = 4 rules)."
      }
    },
    "internalLBName": {
      "type": "string",
      "defaultValue": "vmseries-internal-lb",
      "metadata": {
        "description": "Enter a name for the internal load balancer."
      }
    },
    "internalLBAddress": {
      "type": "string",
      "defaultValue": "10.0.3.100",
      "metadata": {
        "description": "Enter the frontend private IP of the internal load balancer.  The address must be within the load balancer subnet prefix."
      }
    },
    "healthProbePort": {
      "type": "string",
      "defaultValue": "22",
      "allowedValues": [
        "22",
        "80",
        "443"
      ],
      "metadata": {
        "description": "Select a TCP port for the load balancer's health monitoring."
      }
    },
    "FW1-Name": {
      "type": "string",
      "defaultValue": "vmseries-fw-vm1",
      "metadata": {
        "description": "Enter a name for the first firewall."
      }
    },
    "FW1-IPManagement": {
      "type": "string",
      "defaultValue": "10.0.0.4",
      "metadata": {
        "description": "Enter a private IP address for firewall-1's management interface."
      }
    },
    "FW1-IPDataplane1": {
      "type": "string",
      "defaultValue": "10.0.1.4",
      "metadata": {
        "description": "Enter a private IP address for firewall-1's first dataplane interface."
      }
    },
    "FW1-IPDataplane2": {
      "type": "string",
      "defaultValue": "10.0.2.4",
      "metadata": {
        "description": "Enter a private IP address for firewall-1's second dataplane interface."
      }
    },
    "FW2-Name": {
      "type": "string",
      "defaultValue": "vmseries-fw-vm2",
      "metadata": {
        "description": "Enter a name for the second firewall."
      }
    },
    "FW2-IPManagement": {
      "type": "string",
      "defaultValue": "10.0.0.5",
      "metadata": {
        "description": "Enter a private IP address for firewall-2's management interface."
      }
    },
    "FW2-IPDataplane1": {
      "type": "string",
      "defaultValue": "10.0.1.5",
      "metadata": {
        "description": "Enter a private IP address for firewall-2's first dataplane interface."
      }
    },
    "FW2-IPDataplane2": {
      "type": "string",
      "defaultValue": "10.0.2.5",
      "metadata": {
        "description": "Enter a private IP address for firewall-2's second dataplane interface."
      }
    },
    "licenseType": {
      "type": "string",
      "defaultValue": "byol",
      "allowedValues": [
        "byol",
        "bundle1",
        "bundle2"
      ],
      "metadata": {
        "description": "More info: https://docs.paloaltonetworks.com/vm-series/8-1/vm-series-deployment/license-the-vm-series-firewall/license-typesvm-series-firewalls"
      }
    },
    "PANOSVersion": {
      "type": "string",
      "defaultValue": "latest",
      "allowedValues": [
        "latest",
        "9.1.0",
        "9.0.6",
        "9.0.4",
        "9.0.1",
        "8.1.9",
        "8.1.0",
        "8.0.0",
        "7.1.1"
      ],
      "metadata": {
        "description": "Select the PAN-OS version to deploy.  Selecting 'Latest' deploys the latest available image on the Azure Marketplace."
      }
    },
    "VMSize": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "allowedValues": [
        "Standard_D3",
        "Standard_D4",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_A4",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2"
      ],
      "metadata": {
        "description": "Select a VM size for the firewalls."
      }
    },
    "OSDiskType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Select the storage type for the firewall's OS disk. More info: https://docs.microsoft.com/en-us/azure/virtual-machines/windows/managed-disks-overview"
      }
    },
    "availabilitySetOption": {
      "type": "string",
      "defaultValue": "Create new availability set",
      "allowedValues": [
        "Create new availability set",
        "Use existing availability set - Must be in firewall/main resource group",
        "Do not use availability set"
      ],
      "metadata": {
        "description": "Select an option for the firewall's availability set.  The availability set uses 'aligned' as the SKU."
      }
    },
    "availabilitySetName": {
      "type": "string",
      "defaultValue": "vmseries-fw-as",
      "metadata": {
        "description": "Enter a name for the firewall's availability set.  If you are not using an availability set, enter any string."
      }
    },
    "acceleratedNetworking": {
      "type": "string",
      "defaultValue": "disable",
      "allowedValues": [
        "enable (Only supported on PAN-OS 9.0 or greater)",
        "disable"
      ],
      "metadata": {
        "description": "Enable accelerated networking on the firewall's interfaces.  Only enable if you are deploying PAN-OS 9.0 or greater."
      }
    },
    "applyPublicIPToManagement": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Select 'Yes' to add a public IP to the firewall's management interface."
      }
    },
    "applyPublicIPToDataplane1": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Select 'Yes' to add a public IP to the firewall's first dataplane interface (i.e. untrust-interface)."
      }
    },
    "NSGName": {
      "type": "string",
      "defaultValue": "vmseries-nsg",
      "metadata": {
        "description": "Enter a name for firewall NSG.  The name entered will have '-mgmt' appended for the mangement NSG and '-data' for the dataplane NSG."
      }
    },
    "NSGSourcePrefix": {
      "type": "string",
      "defaultValue": "0.0.0.0/0",
      "metadata": {
        "description": "Enter a valid address prefix. This address will be able to access the firewall's management interface over TCP/443 (GUI), and TCP/22 (Terminal)."
      }
    },
    "username": {
      "type": "string",
      "defaultValue": "paloalto",
      "metadata": {
        "description": "Enter the firewall's administrator username. DO NOT USE ADMIN OR ROOT."
      }
    },
    "password": {
      "type": "securestring",
      "minLength": 12,
      "maxLength": 72,
      "metadata": {
        "description": "Enter the firewall's administrator password. Password must be 12-72 characters and must have 3 of the following: 1 lower case character, 1 upper case character, 1 number, and 1 special character that is not a slash or hyphen."
      }
    },
    "optional-BootstrapStorageAccount": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) To bootstrap the firewalls, enter the Azure storage account name that contains the bootstrap file share."
      }
    },
    "optional-BootstrapAccessKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) To bootstrap the firewalls, enter the Azure storage account access key."
      }
    },
    "optional-BootstrapFileShareName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) To bootstrap the firewalls, enter the name of the Azure storage account file share that contains the bootstrap configuration."
      }
    },
    "optional-BootstrapShareDirectory": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "(Optional) To bootstrap from multiple bootstrap directories within the same file share, enter the subdirectory hosting the bootstrap files."
      }
    },
    "optional-AppendStringToResources": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "If the NAME and CONFIGURATION of the created LBs/NSGs/VMs/AVSET/VNET match an existing LBs/NSGs/VMs/AVSET/VNET in the SAME resource group, the template will its skip creation.  If the new resource NAME matches, but the resource CONFIGURATION does not, the template will fail or will overwrite the existing resource."
      }
    }
  },
  "variables": {
    "COMMENT_global": "GLOBAL VARIABLES SHARED AMONG DEPLOYED RESOURCES",
    "global_var_resource_group": "[resourceGroup().name]",
    "global_var_appendedString": "[if(equals(parameters('optional-AppendStringToResources'), ''), '', parameters('optional-AppendStringToResources'))]",
    "global_var_idleTimeoutInMinutes": 4,
    "global_var_allocationMethod": "Static",
    "global_var_networkVersion": "IPv4",
    "global_var_apiVersion": "2018-06-01",
    "global_var_tier": "Regional",
    "global_var_sku": "Standard",
    "global_vnet_name": "[if(equals(parameters('VNETOption'), 'Use existing VNET'), parameters('VNETName'), take(replace(concat(parameters('VNETName'), variables('global_var_appendedString')), ' ', ''), 64))]",
    "global_vnet_resource_group": "[if(equals(parameters('VNETResourceGroup'), ''), variables('global_var_resource_group'), parameters('VNETResourceGroup'))]",
    "global_vnet_option": "[parameters('VNETOption')]",
    "global_vnet_subnet0_name": "[take(replace(parameters('subnetName-Management'), ' ', ''), 80)]",
    "global_vnet_subnet1_name": "[take(replace(parameters('subnetName-Dataplane1'), ' ', ''), 80)]",
    "global_vnet_subnet2_name": "[take(replace(parameters('subnetName-Dataplane2'), ' ', ''), 80)]",
    "global_vnet_subnet3_name": "[take(replace(parameters('subnetName-InternalLB'), ' ', ''), 80)]",
    "global_vnet_subnet4_name": "[take(replace(parameters('subnetName-AppGW'), ' ', ''), 80)]",
    "global_fw_mgmtnsg_name": "[take(replace(concat(parameters('NSGName'), '-mgmt', variables('global_var_appendedString')), ' ', ''), 80)]",
    "global_fw_dataNsg_name": "[take(replace(concat(parameters('NSGName'), '-data', variables('global_var_appendedString')), ' ', ''), 80)]",
    "global_fw_interface0_pip_option": "[parameters('applyPublicIPToManagement')]",
    "global_fw_interface1_pip_option": "[parameters('applyPublicIPToDataplane1')]",
    "global_fw_storageAccountType": "[parameters('OSDiskType')]",
    "global_fw_adminUsername": "[parameters('username')]",
    "global_fw_adminPassword": "[parameters('password')]",
    "global_fw_diskSizeGB": 60,
    "global_fw_bootstrap": "[concat('storage-account=', parameters('optional-BootstrapStorageAccount'), ',access-key=', parameters('optional-BootstrapAccessKey'), ',file-share=', parameters('optional-BootstrapFileShareName'), ',share-directory=', parameters('optional-BootstrapShareDirectory'))]",
    "global_fw_publisher": "paloaltonetworks",
    "global_fw_license": "[parameters('licenseType')]",
    "global_fw_version": "[parameters('PANOSVersion')]",
    "global_fw_product": "vmseries1",
    "global_fw_vmSize": "[parameters('VMSize')]",
    "global_fw_enableAcceleratedNetworking": "[if(equals(parameters('acceleratedNetworking'), 'enable (Only supported on PAN-OS 9.0 or greater)'), 'true', 'false')]",
    "global_fw_avset_option": "[parameters('availabilitySetOption')]",
    "global_fw_avset_name": "[if(equals(parameters('availabilitySetOption'), 'Use existing availability set - Must be in firewall/main resource group'), parameters('availabilitySetName'), take(replace(concat(parameters('availabilitySetName'), variables('global_var_appendedString')), ' ', ''), 80))]",
    "global_fw_avset_id": { "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('global_fw_avset_name'))]" },

    "COMMENT_nsg": "NSG TEMPLATE VARIABLES",
    "nsg_mgmt_inbound_rule_name": "allow-inbound-https-ssh",
    "nsg_mgmt_inbound_rule_sourceAddress": "[parameters('NSGSourcePrefix')]",
    "nsg_mgmt_inbound_rule_ports": [ "22", "443" ],
    "nsg_data_inbound_rule_name": "allow-all-inbound",
    "nsg_data_outbound_rule_name": "allow-all-outbound",

    "COMMENT_vnet": "NEW VNET TEMPLATE VARIABLES",
    "vnet_cidr": "[parameters('VNETPrefix')]",
    "vnet_subnet0_cidr": "[parameters('subnetPrefix-Management')]",
    "vnet_subnet1_cidr": "[parameters('subnetPrefix-Dataplane1')]",
    "vnet_subnet2_cidr": "[parameters('subnetPrefix-Dataplane2')]",
    "vnet_subnet3_cidr": "[parameters('subnetPrefix-InternalLB')]",
    "vnet_subnet4_cidr": "[parameters('subnetPrefix-AppGW')]",

    "COMMENT_publicLb": "PUBLIC LB TEMPLATE VARIABLES",
    "publicLb_name": "[take(replace(concat(parameters('publicLBName'), variables('global_var_appendedString')), ' ', ''), 80)]",
    "publicLb_resource_group": "[resourceGroup().name]",
    "publicLb_frontend_name": "LoadBalancerFrontEnd",
    "publicLb_pool_name": "LoadBalancerBackendPool",
    "publicLb_rule_name": "rule-",
    "publicLb_rule_delimiters": [ ",", ";" ],
    "publicLb_rule_port": "[split(parameters('publicLBAllowedPorts'),variables('publicLb_rule_delimiters'))]",
    "publicLb_rule_protocol": "Tcp",
    "publicLb_rule_enableTcpReset": "false",
    "publicLb_rule_loadDistribution": "Default",
    "publicLb_rule_enableFloatingIP": true,
    "publicLb_rule_disableOutboundSnat": "false",
    "publicLb_probe_name": "HealthProbe",
    "publicLb_probe_port": "[parameters('healthProbePort')]",
    "publicLb_probe_protocol": "Tcp",
    "publicLb_probe_intervalInSeconds": 5,
    "publicLb_probe_numberOfProbes": 2,
    "publicLb_pip_name": "[take(replace(concat(parameters('publicLBName'), '-pip', variables('global_var_appendedString')), ' ', ''), 80)]",

    "COMMENT_internalLb": "INTERNAL LB TEMPLATE VARIABLES",
    "internalLb_name": "[take(replace(concat(parameters('internalLBName'), variables('global_var_appendedString')), ' ', ''), 80)]",
    "internalLb_resource_group": "[resourceGroup().name]",
    "internalLb_frontend_name": "LoadBalancerFrontEnd",
    "internalLb_frontend_ip": "[parameters('internalLBAddress')]",
    "internalLb_pool_name": "LoadBalancerBackendPool",
    "internalLb_rule_name": "ha-ports",
    "internalLb_rule_port": 0,
    "internalLb_rule_protocol": "All",
    "internalLb_rule_enableTcpReset": "false",
    "internalLb_rule_loadDistribution": "Default",
    "internalLb_rule_enableFloatingIP": true,
    "internalLb_rule_disableOutboundSnat": "false",
    "internalLb_probe_name": "HealthProbe",
    "internalLb_probe_port": "[parameters('healthProbePort')]",
    "internalLb_probe_protocol": "Tcp",
    "internalLb_probe_intervalInSeconds": 5,
    "internalLb_probe_numberOfProbes": 2,

    "COMMENT_appgw": "APP-GW VARIABLES",
    "appgw_name": "[take(replace(concat(parameters('appGWName'), variables('global_var_appendedString')), ' ', ''), 80)]",
    "appgw_id": "[resourceId('Microsoft.Network/applicationGateways',variables('appgw_name'))]",

    "appgw_size": "[parameters('appGWSize')]",
    "appgw_tier": "[if(contains(parameters('appGWSize'), 'WAF'), 'WAF', 'Standard')]",
    "appgw_capacity": "[parameters('appGWCapacity')]",
    "appgw_pool_name": "appGatewayBackendPool",
    "appgw_frontend_name": "appGatewayFrontEnd",
    "appgw_frontend_port_name": "appGatewayFrontendPort",
    "appgw_frontend_port": 80,
    "appgw_frontend_protocol": "Http",
    "appgw_frontend_cookie": "Disabled",
    "appgw_http_settings_name": "appGatewayBackendHttpSettings",
    "appgw_http_listener_name": "appGatewayHttpListener",
    "appgw_http_rule_name": "rule-0",
    "appgw_pip_name": "[take(replace(concat(variables('appgw_name'), '-pip', variables('global_var_appendedString')), ' ', ''), 80)]",

    "COMMENT_avset": "AV SET NESTED TEMPLATE VARIABLES (L. 805-834)",
    "avset_sku": "Aligned",
    "avset_platformUpdateDomainCount": 5,
    "avset_platformFaultDomainCount": 2,

    "COMMENT_fw1": "FW1 TEMPLATE VARIABLES",
    "fw1_computerName": "[take(replace(replace(concat(parameters('FW1-Name'), variables('global_var_appendedString')), ' ', ''), '_', ''), 64)]",
    "fw1_interface0_name": "[take(replace(concat(parameters('FW1-Name'), '-nic0', variables('global_var_appendedString')), ' ', ''), 80)]",
    "fw1_interface1_name": "[take(replace(concat(parameters('FW1-Name'), '-nic1', variables('global_var_appendedString')), ' ', ''), 80)]",
    "fw1_interface2_name": "[take(replace(concat(parameters('FW1-Name'), '-nic2', variables('global_var_appendedString')), ' ', ''), 80)]",
    "fw1_interface0_ip": "[parameters('FW1-IPManagement')]",
    "fw1_interface1_ip": "[parameters('FW1-IPDataplane1')]",
    "fw1_interface2_ip": "[parameters('FW1-IPDataplane2')]",
    "fw1_interface0_pip_name": "[take(replace(concat(parameters('FW1-Name'), '-nic0-pip', variables('global_var_appendedString')), ' ', ''), 80)]",
    "fw1_interface1_pip_name": "[take(replace(concat(parameters('FW1-Name'), '-nic1-pip', variables('global_var_appendedString')), ' ', ''), 80)]",
    "fw1_interface0_pip_id": {
      "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('fw1_interface0_pip_name'))]"
    },
    "fw1_interface1_pip_id": {
      "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('fw1_interface1_pip_name'))]"
    },

    "COMMENT_fw2": "FW2 TEMPLATE VARIABLES",
    "fw2_computerName": "[take(replace(replace(concat(parameters('FW2-Name'), variables('global_var_appendedString')), ' ', ''), '_', ''), 64)]",
    "fw2_interface0_name": "[take(replace(concat(parameters('FW2-Name'), '-nic0', variables('global_var_appendedString')), ' ', ''), 80)]",
    "fw2_interface1_name": "[take(replace(concat(parameters('FW2-Name'), '-nic1', variables('global_var_appendedString')), ' ', ''), 80)]",
    "fw2_interface2_name": "[take(replace(concat(parameters('FW2-Name'), '-nic2', variables('global_var_appendedString')), ' ', ''), 80)]",
    "fw2_interface0_ip": "[parameters('FW2-IPManagement')]",
    "fw2_interface1_ip": "[parameters('FW2-IPDataplane1')]",
    "fw2_interface2_ip": "[parameters('FW2-IPDataplane2')]",
    "fw2_interface0_pip_name": "[take(replace(concat(parameters('FW2-Name'),'-nic0-pip', variables('global_var_appendedString')), ' ', ''), 80)]",
    "fw2_interface1_pip_name": "[take(replace(concat(parameters('FW2-Name'),'-nic1-pip', variables('global_var_appendedString')), ' ', ''), 80)]",
    "fw2_interface0_pip_id": {
      "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('fw2_interface0_pip_name'))]"
    },
    "fw2_interface1_pip_id": {
      "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('fw2_interface1_pip_name'))]"
    }
  },
  "resources": [
    {
      "comments": "CREATE FIREWALL MGMT & DATA NSGS",
      "type": "Microsoft.Resources/deployments",
      "name": "CREATE_NSGS",
      "apiVersion": "[variables('global_var_apiVersion')]",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "name": "[variables('global_fw_mgmtnsg_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "securityRules": [
                  {
                    "name": "[variables('nsg_mgmt_inbound_rule_name')]",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "[variables('nsg_mgmt_inbound_rule_sourceAddress')]",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": "100",
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": "[variables('nsg_mgmt_inbound_rule_ports')]",
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "name": "[variables('global_fw_dataNsg_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "securityRules": [
                  {
                    "name": "[variables('nsg_data_inbound_rule_name')]",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": "100",
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "[variables('nsg_data_outbound_rule_name')]",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": "100",
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    {
      "comments": "CREATE VIRTUAL NETWORK WITH 4 SUBNETS",
      "type": "Microsoft.Resources/deployments",
      "name": "CREATE_VNET",
      "apiVersion": "[variables('global_var_apiVersion')]",
      "resourceGroup": "[variables('global_vnet_resource_group')]",
      "condition": "[equals(variables('global_vnet_option'), 'Create new VNET')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "name": "[variables('global_vnet_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[variables('vnet_cidr')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "[variables('global_vnet_subnet0_name')]",
                    "properties": {
                      "addressPrefix": "[variables('vnet_subnet0_cidr')]"
                    }
                  },
                  {
                    "name": "[variables('global_vnet_subnet1_name')]",
                    "properties": {
                      "addressPrefix": "[variables('vnet_subnet1_cidr')]"
                    }
                  },
                  {
                    "name": "[variables('global_vnet_subnet2_name')]",
                    "properties": {
                      "addressPrefix": "[variables('vnet_subnet2_cidr')]"
                    }
                  },
                  {
                    "name": "[variables('global_vnet_subnet3_name')]",
                    "properties": {
                      "addressPrefix": "[variables('vnet_subnet3_cidr')]"
                    }
                  },
                  {
                    "name": "[variables('global_vnet_subnet4_name')]",
                    "properties": {
                      "addressPrefix": "[variables('vnet_subnet4_cidr')]"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    {
      "comments": "CREATE FIREWALL PUBLIC LOAD BALANCER",
      "type": "Microsoft.Resources/deployments",
      "name": "CREATE_PUBLICLB",
      "apiVersion": "[variables('global_var_apiVersion')]",
      "resourceGroup": "[variables('publicLb_resource_group')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "sku": {
                "name": "[variables('global_var_sku')]",
                "tier": "[variables('global_var_tier')]"
              },
              "name": "[variables('publicLb_pip_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publicIPAddressVersion": "[variables('global_var_networkVersion')]",
                "publicIPAllocationMethod": "[variables('global_var_allocationMethod')]",
                "idleTimeoutInMinutes": "[variables('global_var_idleTimeoutInMinutes')]"
              }
            },
            {
              "type": "Microsoft.Network/loadBalancers",
              "sku": {
                "name": "[variables('global_var_sku')]"
              },
              "name": "[variables('publicLb_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "frontendIPConfigurations": [
                  {
                    "name": "[variables('publicLb_frontend_name')]",
                    "properties": {
                      "publicIPAddress": {
                        "id": "[resourceId(variables('publicLb_resource_group'), 'Microsoft.Network/publicIPAddresses', variables('publicLb_pip_name'))]"
                      }
                    }
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "[variables('publicLb_pool_name')]"
                  }
                ],
                "copy": [
                  {
                    "name": "loadBalancingRules",
                    "count": "[length(variables('publicLb_rule_port'))]",
                    "input": {
                      "name": "[concat(variables('publicLb_rule_name'), copyIndex('loadBalancingRules'))]",
                      "properties": {
                        "frontendIPConfiguration": {
                          "id": "[concat(resourceId(variables('publicLb_resource_group'), 'Microsoft.Network/loadBalancers', variables('publicLb_name')), '/frontendIPConfigurations/', variables('publicLb_frontend_name'))]"
                        },
                        "frontendPort": "[variables('publicLb_rule_port')[copyIndex('loadBalancingRules')]]",
                        "backendPort": "[variables('publicLb_rule_port')[copyIndex('loadBalancingRules')]]",
                        "enableFloatingIP": "[variables('publicLb_rule_enableFloatingIP')]",
                        "idleTimeoutInMinutes": "[variables('global_var_idleTimeoutInMinutes')]",
                        "protocol": "[variables('publicLb_rule_protocol')]",
                        "enableTcpReset": "[variables('publicLb_rule_enableTcpReset')]",
                        "loadDistribution": "[variables('publicLb_rule_loadDistribution')]",
                        "disableOutboundSnat": "[variables('publicLb_rule_disableOutboundSnat')]",
                        "backendAddressPool": {
                          "id": "[concat(resourceId(variables('publicLb_resource_group'), 'Microsoft.Network/loadBalancers', variables('publicLb_name')), '/backendAddressPools/', variables('publicLb_pool_name'))]"
                        },
                        "probe": {
                          "id": "[concat(resourceId(variables('publicLb_resource_group'), 'Microsoft.Network/loadBalancers', variables('publicLb_name')), '/probes/', variables('publicLb_probe_name'))]"
                        }
                      }
                    }
                  }
                ],
                "probes": [
                  {
                    "name": "[variables('publicLb_probe_name')]",
                    "properties": {
                      "protocol": "[variables('publicLb_probe_protocol')]",
                      "port": "[variables('publicLb_probe_port')]",
                      "intervalInSeconds": "[variables('publicLb_probe_intervalInSeconds')]",
                      "numberOfProbes": "[variables('publicLb_probe_numberOfProbes')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId(variables('publicLb_resource_group'), 'Microsoft.Network/publicIPAddresses', variables('publicLb_pip_name'))]"
              ]
            }
          ]
        }
      }
    },
    {
      "comments": "CREATE FIREWALL INTERNAL LOAD BALANCER WITH HA PORTS",
      "type": "Microsoft.Resources/deployments",
      "name": "CREATE_INTERNALLB",
      "apiVersion": "[variables('global_var_apiVersion')]",
      "resourceGroup": "[variables('internalLb_resource_group')]",
      "dependsOn": [
        "CREATE_VNET"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Network/loadBalancers",
              "sku": {
                "name": "[variables('global_var_sku')]",
                "tier": "[variables('global_var_tier')]"
              },
              "name": "[variables('internalLb_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "frontendIPConfigurations": [
                  {
                    "name": "[variables('internalLb_frontend_name')]",
                    "properties": {
                      "privateIPAddress": "[variables('internalLb_frontend_ip')]",
                      "privateIPAllocationMethod": "[variables('global_var_allocationMethod')]",
                      "subnet": {
                        "id": "[concat(resourceId(variables('global_vnet_resource_group'), 'Microsoft.Network/virtualNetworks', variables('global_vnet_name')), '/subnets/', variables('global_vnet_subnet3_name'))]"
                      }
                    }
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "[variables('internalLb_pool_name')]"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "name": "[variables('internalLb_rule_name')]",
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[concat(resourceId(variables('internalLb_resource_group'), 'Microsoft.Network/loadBalancers', variables('internalLb_name')), '/frontendIPConfigurations/', variables('internalLb_frontend_name'))]"
                      },
                      "frontendPort": "[variables('internalLb_rule_port')]",
                      "backendPort": "[variables('internalLb_rule_port')]",
                      "enableFloatingIP": "[variables('internalLb_rule_enableFloatingIP')]",
                      "idleTimeoutInMinutes": "[variables('global_var_idleTimeoutInMinutes')]",
                      "protocol": "[variables('internalLb_rule_protocol')]",
                      "enableTcpReset": "[variables('internalLb_rule_enableTcpReset')]",
                      "loadDistribution": "[variables('internalLb_rule_loadDistribution')]",
                      "disableOutboundSnat": "[variables('internalLb_rule_disableOutboundSnat')]",
                      "backendAddressPool": {
                        "id": "[concat(resourceId(variables('internalLb_resource_group'), 'Microsoft.Network/loadBalancers', variables('internalLb_name')), '/backendAddressPools/', variables('internalLb_pool_name'))]"
                      },
                      "probe": {
                        "id": "[concat(resourceId(variables('internalLb_resource_group'), 'Microsoft.Network/loadBalancers', variables('internalLb_name')), '/probes/', variables('internalLb_probe_name'))]"
                      }
                    }
                  }
                ],
                "probes": [
                  {
                    "name": "[variables('internalLb_probe_name')]",
                    "properties": {
                      "protocol": "[variables('internalLb_probe_protocol')]",
                      "port": "[variables('internalLb_probe_port')]",
                      "intervalInSeconds": "[variables('internalLb_probe_intervalInSeconds')]",
                      "numberOfProbes": "[variables('internalLb_probe_numberOfProbes')]"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    {
      "comments": "CREATE FIREWALL APP GW",
      "type": "Microsoft.Resources/deployments",
      "name": "CREATE_APPGW",
      "apiVersion": "2022-06-01",
      "resourceGroup": "[resourceGroup().name]",
      "dependsOn": [
        "CREATE_VNET"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "name": "[variables('appgw_pip_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "type": "Microsoft.Network/publicIPAddresses",
              "location": "[resourceGroup().location]",
              "properties": {
                "publicIPAllocationMethod": "Dynamic"
              }
            },
            {
              "name": "[variables('appgw_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "type": "Microsoft.Network/applicationGateways",
              "properties": {
                "sku": {
                  "name": "[variables('appgw_size')]",
                  "tier": "[variables('appgw_tier')]",
                  "capacity": "[variables('appgw_capacity')]"
                },
                "gatewayIPConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "[concat(resourceId(variables('global_vnet_resource_group'), 'Microsoft.Network/virtualNetworks', variables('global_vnet_name')), '/subnets/', variables('global_vnet_subnet4_name'))]"
                      }
                    }
                  }
                ],
                "frontendIPConfigurations": [
                  {
                    "name": "[variables('appgw_frontend_name')]",
                    "properties": {
                      "PublicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses/', variables('appgw_pip_name'))]"
                      }
                    }
                  }
                ],
                "frontendPorts": [
                  {
                    "name": "[variables('appgw_frontend_port_name')]",
                    "properties": {
                      "Port": "[variables('appgw_frontend_port')]"
                    }
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "[variables('appgw_pool_name')]",
                    "properties": {}
                  }
                ],
                "backendHttpSettingsCollection": [
                  {
                    "name": "[variables('appgw_http_settings_name')]",
                    "properties": {
                      "Port": "[variables('appgw_frontend_port')]",
                      "Protocol": "[variables('appgw_frontend_protocol')]",
                      "CookieBasedAffinity": "[variables('appgw_frontend_cookie')]"
                    }
                  }
                ],
                "httpListeners": [
                  {
                    "name": "[variables('appgw_http_listener_name')]",
                    "properties": {
                      "FrontendIPConfiguration": {
                        "Id": "[concat(variables('appgw_id'), '/frontendIPConfigurations/', variables('appgw_frontend_name'))]"
                      },
                      "FrontendPort": {
                        "Id": "[concat(variables('appgw_id'), '/frontendPorts/', variables('appgw_frontend_port_name'))]"
                      },
                      "Protocol": "[variables('appgw_frontend_protocol')]",
                      "SslCertificate": null
                    }
                  }
                ],
                "requestRoutingRules": [
                  {
                    "name": "[variables('appgw_http_rule_name')]",
                    "properties": {
                      "RuleType": "Basic",
                      "httpListener": {
                        "id": "[concat(variables('appgw_id'), '/httpListeners/', variables('appgw_http_listener_name'))]"
                      },
                      "backendAddressPool": {
                        "id": "[concat(variables('appgw_id'), '/backendAddressPools/', variables('appgw_pool_name'))]"
                      },
                      "backendHttpSettings": {
                        "id": "[concat(variables('appgw_id'), '/backendHttpSettingsCollection/', variables('appgw_http_settings_name'))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses/', variables('appgw_pip_name'))]"
              ]
            }
          ]
        }
      }
    },
    {
      "comments": "CREATE FIREWALL AVAILABILITY SET",
      "type": "Microsoft.Resources/deployments",
      "name": "CREATE_AVSET",
      "apiVersion": "[variables('global_var_apiVersion')]",
      "resourceGroup": "[resourceGroup().name]",
      "condition": "[equals(variables('global_fw_avset_option'), 'Create new availability set')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "sku": {
                "name": "[variables('avset_sku')]"
              },
              "name": "[variables('global_fw_avset_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "platformUpdateDomainCount": "[variables('avset_platformUpdateDomainCount')]",
                "platformFaultDomainCount": "[variables('avset_platformFaultDomainCount')]"
              }
            }
          ]
        }
      }
    },
    {
      "comments": "CREATE FW1 WITH INTERFACES",
      "type": "Microsoft.Resources/deployments",
      "name": "CREATE_FW1",
      "apiVersion": "[variables('global_var_apiVersion')]",
      "resourceGroup": "[resourceGroup().name]",
      "dependsOn": [
        "CREATE_VNET",
        "CREATE_AVSET",
        "CREATE_NSGS",
        "CREATE_INTERNALLB",
        "CREATE_APPGW",
        "CREATE_PUBLICLB"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "condition": "[equals(variables('global_fw_interface0_pip_option'), 'Yes')]",
              "type": "Microsoft.Network/publicIPAddresses",
              "sku": {
                "name": "[variables('global_var_sku')]",
                "tier": "[variables('global_var_tier')]"
              },
              "name": "[variables('fw1_interface0_pip_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publicIPAddressVersion": "[variables('global_var_networkVersion')]",
                "publicIPAllocationMethod": "[variables('global_var_allocationMethod')]",
                "idleTimeoutInMinutes": "[variables('global_var_idleTimeoutInMinutes')]"
              }
            },
            {
              "condition": "[equals(variables('global_fw_interface1_pip_option'), 'Yes')]",
              "type": "Microsoft.Network/publicIPAddresses",
              "sku": {
                "name": "[variables('global_var_sku')]",
                "tier": "[variables('global_var_tier')]"
              },
              "name": "[variables('fw1_interface1_pip_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publicIPAddressVersion": "[variables('global_var_networkVersion')]",
                "publicIPAllocationMethod": "[variables('global_var_allocationMethod')]",
                "idleTimeoutInMinutes": "[variables('global_var_idleTimeoutInMinutes')]"
              }
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "name": "[variables('fw1_interface0_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIpAddress": "[variables('fw1_interface0_ip')]",
                      "privateIPAllocationMethod": "[variables('global_var_allocationMethod')]",
                      "publicIpAddress": "[if(equals(variables('global_fw_interface0_pip_option'), 'Yes'), variables('fw1_interface0_pip_id'), json('null'))]",
                      "subnet": {
                        "id": "[concat(resourceId(variables('global_vnet_resource_group'), 'Microsoft.Network/virtualNetworks', variables('global_vnet_name')), '/subnets/', variables('global_vnet_subnet0_name'))]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "[variables('global_var_networkVersion')]"
                    }
                  }
                ],
                "enableAcceleratedNetworking": "[variables('global_fw_enableAcceleratedNetworking')]",
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('global_fw_mgmtnsg_name'))]"
                },
                "tapConfigurations": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses/', variables('fw1_interface0_pip_name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "name": "[variables('fw1_interface1_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIpAddress": "[variables('fw1_interface1_ip')]",
                      "privateIPAllocationMethod": "[variables('global_var_allocationMethod')]",
                      "publicIpAddress": "[if(equals(variables('global_fw_interface1_pip_option'), 'Yes'), variables('fw1_interface1_pip_id'), json('null'))]",
                      "subnet": {
                        "id": "[concat(resourceId(variables('global_vnet_resource_group'), 'Microsoft.Network/virtualNetworks', variables('global_vnet_name')), '/subnets/', variables('global_vnet_subnet1_name'))]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "[variables('global_var_networkVersion')]",
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "[concat(resourceId(variables('publicLb_resource_group'), 'Microsoft.Network/loadBalancers', variables('publicLb_name')), '/backendAddressPools/', variables('publicLb_pool_name'))]"
                        }
                      ],
                      "applicationGatewayBackendAddressPools": [
                    	{
                      	  "id": "[concat(variables('appgw_id'), '/backendAddressPools/', variables('appgw_pool_name'))]"

                    	}
                  	  ]
                    }
                  }
                ],
                "enableAcceleratedNetworking": "[variables('global_fw_enableAcceleratedNetworking')]",
                "enableIPForwarding": true,
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('global_fw_dataNsg_name'))]"
                },
                "tapConfigurations": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses/', variables('fw1_interface1_pip_name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "name": "[variables('fw1_interface2_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIpAddress": "[variables('fw1_interface2_ip')]",
                      "privateIPAllocationMethod": "[variables('global_var_allocationMethod')]",
                      "subnet": {
                        "id": "[concat(resourceId(variables('global_vnet_resource_group'), 'Microsoft.Network/virtualNetworks', variables('global_vnet_name')), '/subnets/', variables('global_vnet_subnet2_name'))]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "[variables('global_var_networkVersion')]",
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "[concat(resourceId(variables('internalLb_resource_group'), 'Microsoft.Network/loadBalancers', variables('internalLb_name')), '/backendAddressPools/', variables('internalLb_pool_name'))]"
                        }
                      ]
                    }
                  }
                ],
                "enableAcceleratedNetworking": "[variables('global_fw_enableAcceleratedNetworking')]",
                "enableIPForwarding": true,
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('global_fw_dataNsg_name'))]"
                },
                "tapConfigurations": []
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "name": "[variables('fw1_computerName')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "plan": {
                "name": "[variables('global_fw_license')]",
                "product": "[variables('global_fw_product')]",
                "publisher": "[variables('global_fw_publisher')]"
              },
              "properties": {
                "availabilitySet": "[if(equals(variables('global_fw_avset_option'), 'Do not use availability set'), json('null'), variables('global_fw_avset_id'))]",
                "hardwareProfile": {
                  "vmSize": "[variables('global_fw_vmSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "[variables('global_fw_publisher')]",
                    "offer": "[variables('global_fw_product')]",
                    "sku": "[variables('global_fw_license')]",
                    "version": "[variables('global_fw_version')]"
                  },
                  "osDisk": {
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "[variables('global_fw_storageAccountType')]"
                    },
                    "diskSizeGB": "[variables('global_fw_diskSizeGB')]"
                  }
                },
                "osProfile": {
                  "computerName": "[variables('fw1_computerName')]",
                  "adminUsername": "[variables('global_fw_adminUsername')]",
                  "adminPassword": "[variables('global_fw_adminPassword')]",
                  "customData": "[base64(variables('global_fw_bootstrap'))]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('fw1_interface0_name'))]",
                      "properties": {
                        "primary": true
                      }
                    },
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('fw1_interface1_name'))]",
                      "properties": {
                        "primary": false
                      }
                    },
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('fw1_interface2_name'))]",
                      "properties": {
                        "primary": false
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('fw1_interface0_name'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('fw1_interface1_name'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('fw1_interface2_name'))]"
              ]
            }
          ]
        }
      }
    },
    {
      "comments": "CREATE FW2 WITH INTERFACES",
      "type": "Microsoft.Resources/deployments",
      "name": "CREATE_FW2",
      "apiVersion": "[variables('global_var_apiVersion')]",
      "resourceGroup": "[resourceGroup().name]",
      "dependsOn": [
        "CREATE_VNET",
        "CREATE_AVSET",
        "CREATE_NSGS",
        "CREATE_INTERNALLB",
        "CREATE_APPGW",
        "CREATE_PUBLICLB"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "condition": "[equals(variables('global_fw_interface0_pip_option'), 'Yes')]",
              "type": "Microsoft.Network/publicIPAddresses",
              "sku": {
                "name": "[variables('global_var_sku')]",
                "tier": "[variables('global_var_tier')]"
              },
              "name": "[variables('fw2_interface0_pip_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publicIPAddressVersion": "[variables('global_var_networkVersion')]",
                "publicIPAllocationMethod": "[variables('global_var_allocationMethod')]",
                "idleTimeoutInMinutes": "[variables('global_var_idleTimeoutInMinutes')]"
              }
            },
            {
              "condition": "[equals(variables('global_fw_interface1_pip_option'), 'Yes')]",
              "type": "Microsoft.Network/publicIPAddresses",
              "sku": {
                "name": "[variables('global_var_sku')]",
                "tier": "[variables('global_var_tier')]"
              },
              "name": "[variables('fw2_interface1_pip_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "publicIPAddressVersion": "[variables('global_var_networkVersion')]",
                "publicIPAllocationMethod": "[variables('global_var_allocationMethod')]",
                "idleTimeoutInMinutes": "[variables('global_var_idleTimeoutInMinutes')]"
              }
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "name": "[variables('fw2_interface0_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIpAddress": "[variables('fw2_interface0_ip')]",
                      "privateIPAllocationMethod": "[variables('global_var_allocationMethod')]",
                      "publicIpAddress": "[if(equals(variables('global_fw_interface0_pip_option'),'Yes'), variables('fw2_interface0_pip_id'), json('null'))]",
                      "subnet": {
                        "id": "[concat(resourceId(variables('global_vnet_resource_group'), 'Microsoft.Network/virtualNetworks', variables('global_vnet_name')), '/subnets/', variables('global_vnet_subnet0_name'))]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "[variables('global_var_networkVersion')]"
                    }
                  }
                ],
                "enableAcceleratedNetworking": "[variables('global_fw_enableAcceleratedNetworking')]",
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('global_fw_mgmtnsg_name'))]"
                },
                "tapConfigurations": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses/', variables('fw2_interface0_pip_name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "name": "[variables('fw2_interface1_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIpAddress": "[variables('fw2_interface1_ip')]",
                      "privateIPAllocationMethod": "[variables('global_var_allocationMethod')]",
                      "publicIpAddress": "[if(equals(variables('global_fw_interface1_pip_option'),'Yes'), variables('fw2_interface1_pip_id'), json('null'))]",
                      "subnet": {
                        "id": "[concat(resourceId(variables('global_vnet_resource_group'), 'Microsoft.Network/virtualNetworks', variables('global_vnet_name')), '/subnets/', variables('global_vnet_subnet1_name'))]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "[variables('global_var_networkVersion')]",
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "[concat(resourceId(variables('publicLb_resource_group'), 'Microsoft.Network/loadBalancers', variables('publicLb_name')), '/backendAddressPools/', variables('publicLb_pool_name'))]"
                        }
                      ],
                      "applicationGatewayBackendAddressPools": [
                    	{
                      	  "id": "[concat(variables('appgw_id'), '/backendAddressPools/', variables('appgw_pool_name'))]"

                    	}
                  	  ]
                    }
                  }
                ],
                "enableAcceleratedNetworking": "[variables('global_fw_enableAcceleratedNetworking')]",
                "enableIPForwarding": true,
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('global_fw_dataNsg_name'))]"
                },
                "tapConfigurations": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses/', variables('fw2_interface1_pip_name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "name": "[variables('fw2_interface2_name')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIpAddress": "[variables('fw2_interface2_ip')]",
                      "privateIPAllocationMethod": "[variables('global_var_allocationMethod')]",
                      "subnet": {
                        "id": "[concat(resourceId(variables('global_vnet_resource_group'), 'Microsoft.Network/virtualNetworks', variables('global_vnet_name')), '/subnets/', variables('global_vnet_subnet2_name'))]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "[variables('global_var_networkVersion')]",
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "[concat(resourceId(variables('internalLb_resource_group'), 'Microsoft.Network/loadBalancers', variables('internalLb_name')), '/backendAddressPools/', variables('internalLb_pool_name'))]"
                        }
                      ]
                    }
                  }
                ],
                "enableAcceleratedNetworking": "[variables('global_fw_enableAcceleratedNetworking')]",
                "enableIPForwarding": true,
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('global_fw_dataNsg_name'))]"
                },
                "tapConfigurations": []
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "name": "[variables('fw2_computerName')]",
              "apiVersion": "[variables('global_var_apiVersion')]",
              "location": "[resourceGroup().location]",
              "plan": {
                "name": "[variables('global_fw_license')]",
                "product": "[variables('global_fw_product')]",
                "publisher": "[variables('global_fw_publisher')]"
              },
              "properties": {
                "availabilitySet": "[if(equals(variables('global_fw_avset_option'),'Do not use availability set'), json('null'), variables('global_fw_avset_id'))]",
                "hardwareProfile": {
                  "vmSize": "[variables('global_fw_vmSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "[variables('global_fw_publisher')]",
                    "offer": "[variables('global_fw_product')]",
                    "sku": "[variables('global_fw_license')]",
                    "version": "[variables('global_fw_version')]"
                  },
                  "osDisk": {
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "[variables('global_fw_storageAccountType')]"
                    },
                    "diskSizeGB": "[variables('global_fw_diskSizeGB')]"
                  }
                },
                "osProfile": {
                  "computerName": "[variables('fw2_computerName')]",
                  "adminUsername": "[variables('global_fw_adminUsername')]",
                  "adminPassword": "[variables('global_fw_adminPassword')]",
                  "customData": "[base64(variables('global_fw_bootstrap'))]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('fw2_interface0_name'))]",
                      "properties": {
                        "primary": true
                      }
                    },
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('fw2_interface1_name'))]",
                      "properties": {
                        "primary": false
                      }
                    },
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('fw2_interface2_name'))]",
                      "properties": {
                        "primary": false
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('fw2_interface0_name'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('fw2_interface1_name'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('fw2_interface2_name'))]"
              ]
            }
          ]
        }
      }
    }
  ]
}
